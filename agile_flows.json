[
    {
        "id": "14aabb1a.e5d4a5",
        "type": "tab",
        "label": "Octopus Agile",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9de016f6.3e7a68",
        "type": "subflow",
        "name": "Query database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "dda5acbb.260cc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "324124e5.b9d75c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ce6df854.ed32e8",
        "type": "subflow",
        "name": "Count future records",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "30f844b.6375bbc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 80,
                "wires": [
                    {
                        "id": "bbe3b761.2e3158",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ba99b3ae.92859",
        "type": "subflow",
        "name": "Get rates",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ec967d61.c7f93"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "f94d30b2.75db",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "66322da5.993fa4",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6b8bd831.6624e8",
        "type": "ui_tab",
        "z": "",
        "name": "Octopus Energy",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "24a27c53.127b84",
        "type": "ui_group",
        "z": "",
        "name": "Agile Tariff",
        "tab": "6b8bd831.6624e8",
        "order": 1,
        "disp": true,
        "width": 14,
        "collapse": false
    },
    {
        "id": "24b0e4d8.0e1d6c",
        "type": "sqlitedb",
        "z": "",
        "db": "/home/pi/agile_rates.sqlite",
        "mode": "RWC"
    },
    {
        "id": "b779cd6f.1f32",
        "type": "ui_group",
        "z": "",
        "name": "Current rate",
        "tab": "6b8bd831.6624e8",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false
    },
    {
        "id": "de3f73d.474a99",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "cecd521d.6d419",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d939c6e.86634",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "dbfba6b7.3b2048",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "e8c0e57d.692858",
        "type": "inject",
        "z": "14aabb1a.e5d4a5",
        "name": "Update rates",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "10a09d48.a3ff13"
            ]
        ]
    },
    {
        "id": "453de4ec.c83f1c",
        "type": "sqlite",
        "z": "14aabb1a.e5d4a5",
        "mydb": "24b0e4d8.0e1d6c",
        "sqlquery": "batch",
        "sql": "INSERT INTO rates VALUES ($timestamp, $price) ON CONFLICT DO NOTHING;",
        "name": "Agile batch",
        "x": 1330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "98d13e6a.c000e",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Reformat rates",
        "func": "// Reformat the results, making msg.payload an\n// object with timestamps as keys and the \n// unit price inc VAT as values. \n\nvar output = {};\n\nfor (var key in msg.payload.results) {\n    // Parse time string and convert to seconds since epoch\n    var timestamp = Date.parse(msg.payload.results[key].valid_from) / 1000;\n    \n    output[timestamp] = msg.payload.results[key].value_inc_vat;  \n}\n\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 160,
        "wires": [
            [
                "1db69181.96950e"
            ]
        ]
    },
    {
        "id": "1db69181.96950e",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Insert into database",
        "func": "msg.topic = \"BEGIN TRANSACTION;\";\n\nfor (var key in msg.payload) {\n    // Using sqlite upsert extention to only insert if key does not exist\n    msg.topic += \"INSERT INTO rates VALUES ('\" + key + \"', '\" + msg.payload[key] + \"') ON CONFLICT DO NOTHING;\"\n}\nmsg.topic += \"COMMIT;\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 160,
        "wires": [
            [
                "453de4ec.c83f1c"
            ]
        ]
    },
    {
        "id": "9d92a432.4d0028",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "HTTP status",
        "func": "// This function node exists to display the result of the HTTP request\n// as a status line below this node.\n\nlet result;\nlet date = new Date();  \nlet options = {  \n    weekday: \"short\", year: \"numeric\", month: \"short\",  \n    day: \"numeric\", hour: \"2-digit\", minute: \"2-digit\"  \n};  \nlet dateStr = date.toLocaleTimeString(\"en-gb\", options);\n\nif (msg.statusCode == 200) {\n\n    result = \"OK at: \" + dateStr;\n    node.status({fill:\"green\",shape:\"dot\",text:result});\n}\nelse {\n    result = \"Error: \" + msg.statusCode + \" at: \" + dateStr;\n    node.status({fill:\"red\",shape:\"dot\",text:result});\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "dda5acbb.260cc",
        "type": "function",
        "z": "9de016f6.3e7a68",
        "name": "Request to SQL",
        "func": "// Requests one or more records from the database\n// Input request is of the form:\n//\n//   msg.payload.timestamp - the reference timestamp\n//   msg.payload.numBefore - the number of half hour records prior to the reference\n//   msg.payload.numAfter  - the number of half hour records after the reference\n//\n// Will always return at least the record containing the reference timestamp.\n// numBefore and numAfter may be zero.\n\n// database uses seconds since epoch\nvar timestamp = msg.payload.timestamp / 1000;\n\nvar firstTimestamp = Math.floor((timestamp - (msg.payload.numBefore * 1800)) / 1800) * 1800;\nvar lastTimestamp  = Math.floor((timestamp + (msg.payload.numAfter * 1800)) / 1800) * 1800;\n\nmsg.topic = \"SELECT * FROM rates WHERE start_time>='\" + firstTimestamp + \"' AND start_time<='\" + lastTimestamp + \"';\"\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "324124e5.b9d75c"
            ]
        ]
    },
    {
        "id": "324124e5.b9d75c",
        "type": "sqlite",
        "z": "9de016f6.3e7a68",
        "mydb": "24b0e4d8.0e1d6c",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO rates VALUES ($timestamp, $price) ON CONFLICT DO NOTHING;",
        "name": "Agile rates",
        "x": 430,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "efd1e600.7a6158",
        "type": "comment",
        "z": "9de016f6.3e7a68",
        "name": "Input and output message definitions",
        "info": "## To request data from the database\n\nlet request = {};\n\nrequest.timestamp = msg.payload;\nrequest.numBefore = 1;\nrequest.numAfter  = 1;\n\nmsg.payload = request;\n\n## Result returned as\n\nmsg.payload = [\n   {\"start_time\":1584288000,\"cost\":20.349},\n   {\"start_time\":1584289800,\"cost\":21.504},\n   {\"start_time\":1584291600,\"cost\":21.147}\n];\n",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "a34600fe.0a13d",
        "type": "inject",
        "z": "14aabb1a.e5d4a5",
        "name": "Tick",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 90,
        "y": 420,
        "wires": [
            [
                "77135277.92127c",
                "13fe4390.42f81c"
            ]
        ]
    },
    {
        "id": "77135277.92127c",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Request -6/+12 hrs",
        "func": "// Requests -6...+12 hrs from now.\n\nlet request = {};\n\nrequest.timestamp = msg.payload;\nrequest.numBefore = 12;\nrequest.numAfter  = 24;\n\nmsg.payload = request;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "329aa0ad.bc6ba"
            ]
        ]
    },
    {
        "id": "13fe4390.42f81c",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Request now +/- 1",
        "func": "// Requests 3 records around the current rate\n\nlet request = {};\n\nrequest.timestamp = msg.payload;\nrequest.numBefore = 1;\nrequest.numAfter  = 1;\n\nmsg.payload = request;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 360,
        "wires": [
            [
                "43f1f8c5.e624b8"
            ]
        ]
    },
    {
        "id": "329aa0ad.bc6ba",
        "type": "subflow:9de016f6.3e7a68",
        "z": "14aabb1a.e5d4a5",
        "name": "Query database",
        "env": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "35156489.c6f31c"
            ]
        ]
    },
    {
        "id": "43f1f8c5.e624b8",
        "type": "subflow:9de016f6.3e7a68",
        "z": "14aabb1a.e5d4a5",
        "name": "Query database",
        "env": [],
        "x": 500,
        "y": 360,
        "wires": [
            [
                "710c0810.605268",
                "ca91411d.458dd"
            ]
        ]
    },
    {
        "id": "35156489.c6f31c",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Prepare graph",
        "func": "// Prepares the line graph in the format:\n\n// [{\n//   \"series\": [\"Price\"],\n//   \"data\": [\n//       [{ \"x\": 1504029632890, \"y\": 5 },\n//        { \"x\": 1504029636001, \"y\": 4 },\n//        { \"x\": 1504029638656, \"y\": 2 }\n//       ]\n//   ],\n//   \"labels\": [\"\"]\n// }]\n\nlet data = [];\nlet labels = [];\nlet series = [\"Price\", \"Now\"];\nlet dataSeries = [];\n\nlet leftX = 0;\nlet rightX = 0;\nlet max = 0;\nlet min = 0;\n\nfor (let i=0; i<msg.payload.length; i++) {\n    \n    let item = {};\n    item['x'] = (msg.payload[i].start_time * 1000);\n    item['y'] = msg.payload[i].cost;\n\n    if (i === 0) {\n        leftX = item['x'];\n    }\n    else if (i == (msg.payload.length - 1)) {\n        rightX = item['x'];\n    }\n    \n    // update min/max for vertical line\n    if (item['y'] > max) {\n        max = item['y'];\n    }\n    else if (item['y'] < min) {\n        min = item['y'];\n    }\n    \n    dataSeries.push(item);    \n}\n\ndata.push(dataSeries);\n\n// Now - a vertical line to show current time\ndataSeries = [ { 'x': Date.now(), 'y': (max + 2)}, { 'x': Date.now(), 'y': (min - 2)}];\ndata.push(dataSeries);\n\n// A horizontal line to show zero cost\nif (leftX && rightX) {\n    series.push(\"Zero\");\n    dataSeries = [ { 'x': leftX, 'y': 0}, { 'x': rightX, 'y': 0}];\n    data.push(dataSeries);\n}\n\nlabels.push(\"\");\n\nlet info = {};\ninfo.series = series;\ninfo.data = data;\ninfo.labels = labels;\n\n\nmsg.payload = [];\nmsg.payload.push(info);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 480,
        "wires": [
            [
                "5b3327c2.013328"
            ]
        ]
    },
    {
        "id": "710c0810.605268",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Prepare display",
        "func": "// Database result is an array of 3 JSON objects, e.g:\n//  msg.payload = [\n//     {\"start_time\":1584288000,\"cost\":20.349},\n//     {\"start_time\":1584289800,\"cost\":21.504},\n//     {\"start_time\":1584291600,\"cost\":21.147}\n//  ];\n\nlet numValues = msg.payload.length;\n\nif (numValues > 0) {\n  // Calculate the trend from least squares slope of the cost values\n  let sigmaX = 0;\n  let sigmaY = 0;\n  let sigmaXY = 0;\n  let sigmaXX = 0;\n  for (let x=0; x<numValues; x++) {\n    let y = msg.payload[x].cost;\n    sigmaX += x;\n    sigmaY += y;\n    sigmaXY += (x * y);\n    sigmaXX += (x * x);\n  }\n  let slope = ((numValues * sigmaXY) - (sigmaX * sigmaY))/((numValues * sigmaXX) - (sigmaX * sigmaX));\n  let trend = \"\";\n  \n  if (slope > 0.6) {\n    trend += \"--trend UP\";\n  }\n  else if (slope > 0.1) {\n    trend += \"--trend up\";\n  }\n  else if (slope < -0.6) {\n    trend += \"--trend DOWN\";\n  }\n  else if (slope < -0.1) {\n    trend += \"--trend down\";\n  }\n\n  // For debugging thresholds\n  node.status({text:\"slope: \"+slope.toFixed(2)+\" \"+trend});\n\n  // TODO vary brightness according to time of day?\n  let brightness = 0.3;\n\n  // Payload is the command arguments for the python display driver script\n  msg.payload = `${trend} --brightness ${brightness} --cost ${msg.payload[1].cost.toFixed(1)}`;\n}\nelse {\n    msg.payload = \"--cost nodata\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 320,
        "wires": [
            [
                "c03eb0a3.78fec"
            ]
        ]
    },
    {
        "id": "ca91411d.458dd",
        "type": "function",
        "z": "14aabb1a.e5d4a5",
        "name": "Prepare gauge",
        "func": "// Database result is an array of 3 JSON objects, e.g:\n//  msg.payload = [\n//     {\"start_time\":1584288000,\"cost\":20.349},\n//     {\"start_time\":1584289800,\"cost\":21.504},\n//     {\"start_time\":1584291600,\"cost\":21.147}\n//  ];\n\n// The current rate is the middle one\n\nmsg.payload = msg.payload[1].cost.toFixed(1);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "a000d476.7a1c68"
            ]
        ]
    },
    {
        "id": "5b3327c2.013328",
        "type": "ui_chart",
        "z": "14aabb1a.e5d4a5",
        "name": "Rate graph",
        "group": "24a27c53.127b84",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Rate (p/kWh)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "colors": [
            "#1f77b4",
            "#e46c02",
            "#00ee48",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 890,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c03eb0a3.78fec",
        "type": "exec",
        "z": "14aabb1a.e5d4a5",
        "command": "/home/pi/display_driver.py",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "30",
        "oldrc": false,
        "name": "Update display",
        "x": 900,
        "y": 320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a000d476.7a1c68",
        "type": "ui_gauge",
        "z": "14aabb1a.e5d4a5",
        "name": "Current cost",
        "group": "b779cd6f.1f32",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "p/kWh",
        "format": "{{value}}",
        "min": "-5",
        "max": "30",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 890,
        "y": 400,
        "wires": []
    },
    {
        "id": "1a6e66f5.85f5b9",
        "type": "comment",
        "z": "14aabb1a.e5d4a5",
        "name": "Database update when more records needed",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "3c52b30d.3c66bc",
        "type": "comment",
        "z": "14aabb1a.e5d4a5",
        "name": "Refresh display every minute",
        "info": "",
        "x": 140,
        "y": 300,
        "wires": []
    },
    {
        "id": "30f844b.6375bbc",
        "type": "function",
        "z": "ce6df854.ed32e8",
        "name": "Request to SQL",
        "func": "// Count the number of furure records available from the current time onwards.\n// Excludes the current half hour, may return zero.\n\n// database uses seconds since epoch, time at the beginning of each half hour\nvar timestamp = Date.now() / 1000;\n\nmsg.topic = \"SELECT COUNT(start_time) FROM rates WHERE start_time>'\" + timestamp + \"';\"\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "8993c70.7f8fc38"
            ]
        ]
    },
    {
        "id": "8993c70.7f8fc38",
        "type": "sqlite",
        "z": "ce6df854.ed32e8",
        "mydb": "24b0e4d8.0e1d6c",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO rates VALUES ($timestamp, $price) ON CONFLICT DO NOTHING;",
        "name": "Agile rates",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "bbe3b761.2e3158"
            ]
        ]
    },
    {
        "id": "bbe3b761.2e3158",
        "type": "function",
        "z": "ce6df854.ed32e8",
        "name": "Extract count",
        "func": "// Results is an array with one object:\n//\n// msg.payload[0] = { COUNT(start_time): 0 }\n//\n\nmsg.payload = msg.payload[0][\"COUNT(start_time)\"];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "10a09d48.a3ff13",
        "type": "subflow:ce6df854.ed32e8",
        "z": "14aabb1a.e5d4a5",
        "name": "Count future records",
        "env": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "4cec89d0.130008"
            ]
        ]
    },
    {
        "id": "4cec89d0.130008",
        "type": "switch",
        "z": "14aabb1a.e5d4a5",
        "name": "Less than 15",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "15",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "78c072da.bdab3c"
            ]
        ]
    },
    {
        "id": "ec967d61.c7f93",
        "type": "function",
        "z": "ba99b3ae.92859",
        "name": "Prepare API",
        "func": "// Prepares an API call for the Agile rates\n\n// Agile product code\nconst product = \"AGILE-18-02-21\";\n\n// Region code: A is Eastern region\nconst region = 'A';\n\n// Tariff code\nconst tariff = \"E-1R-\" + product + \"-\" + region;\n\n// Build URL\nmsg.url = \"https://api.octopus.energy/v1/products/\" + product + \"/electricity-tariffs/\" + tariff + \"/standard-unit-rates\";\n\n// Fetch from -12 hours to +24 hours\nconst now = new Date();\nconst from = new Date(now.getTime() - (12 * 3600 * 1000));\nconst to   = new Date(now.getTime() + (24 * 3600 * 1000));\n\n// HTTP node is configured to convert msg.payload to query string parameters\nmsg.payload = { 'period_from': from.toISOString(), 'period_to': to.toISOString() };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f94d30b2.75db"
            ]
        ]
    },
    {
        "id": "f94d30b2.75db",
        "type": "http request",
        "z": "ba99b3ae.92859",
        "name": "http request json",
        "method": "GET",
        "ret": "obj",
        "paytoqs": true,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "78c072da.bdab3c",
        "type": "subflow:ba99b3ae.92859",
        "z": "14aabb1a.e5d4a5",
        "name": "Get rates",
        "env": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "9d92a432.4d0028",
                "98d13e6a.c000e"
            ]
        ]
    }
]